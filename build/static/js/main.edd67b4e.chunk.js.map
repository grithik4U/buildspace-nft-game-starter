{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","MyEpicGame","abi","console","log","getCharacters","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","alert","on","off","mintCharacterNFTAction","characterId","mintCharacterNFT","mintTxn","wait","warn","length","character","index","src","imageURL","alt","type","onClick","Arena","currentAccount","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","from","newBossHp","newPlayerHp","bossHp","playerHp","toString","toLowerCase","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edd67b4e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","const CONTRACT_ADDRESS = '0xa5953FFe50396Ed711d7Fa23202B3ACC134161ab';\r\nconst transformCharacterData = (characterData) => {\r\n    return {\r\n      name: characterData.name,\r\n      imageURI: characterData.imageURI,\r\n      hp: characterData.hp.toNumber(),\r\n      maxHp: characterData.maxHp.toNumber(),\r\n      attackDamage: characterData.attackDamage.toNumber(),\r\n    };\r\n  };\r\n  \r\n  export { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './SelectCharacter.css';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport MyEpicGame from '../../MyEpicGame.json';\r\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\r\n\r\n\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [gameContract, setGameContract] = useState(null);\r\n  const [mintingCharacter, setMintingCharacter] = useState(false);\r\n   \r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n  \r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        MyEpicGame.abi,\r\n        signer\r\n      );\r\n  \r\n      /*\r\n       * This is the big difference. Set our gameContract in state.\r\n       */\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log('Ethereum object not found');\r\n    }\r\n    \r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCharacters = async () => {\r\n      try {\r\n        console.log('Getting contract characters to mint');\r\n  \r\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n        console.log('charactersTxn:', charactersTxn);\r\n  \r\n        const characters = charactersTxn.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n  \r\n        setCharacters(characters);\r\n      } catch (error) {\r\n        console.error('Something went wrong fetching characters:', error);\r\n      }\r\n    };\r\n  \r\n    /*\r\n     * Add a callback method that will fire when this event is received\r\n     */\r\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n      console.log(\r\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n      );\r\n  \r\n      /*\r\n       * Once our character NFT is minted we can fetch the metadata from our contract\r\n       * and set it in state to move onto the Arena\r\n       */\r\n      if (gameContract) {\r\n        const characterNFT = await gameContract.checkIfUserHasNFT();\r\n        console.log('CharacterNFT: ', characterNFT);\r\n        setCharacterNFT(transformCharacterData(characterNFT));\r\n        console.log( alert(`Your NFT is all done --> see it here: https://testnets.opensea.io/assets/goerli/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`));\r\n        \r\n      }\r\n    };\r\n  \r\n    if (gameContract) {\r\n      getCharacters();\r\n  \r\n      /*\r\n       * Setup NFT Minted Listener\r\n       */\r\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\r\n    }\r\n  \r\n    return () => {\r\n      /*\r\n       * When your component unmounts, let;s make sure to clean up this listener\r\n       */\r\n      if (gameContract) {\r\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\r\n      }\r\n    };\r\n  }, [gameContract]);\r\n\r\n  const mintCharacterNFTAction = async (characterId) => {\r\n      try {\r\n        if (gameContract) {\r\n          console.log('Minting character in progress...');\r\n          const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n          await mintTxn.wait();\r\n          console.log('mintTxn:', mintTxn);\r\n          setMintingCharacter(false);\r\n        }\r\n      } catch (error) {\r\n        console.warn('MintCharacterAction Error:', error);\r\n        setMintingCharacter(false);\r\n      }\r\n    };\r\n  \r\n  const renderCharacters= () =>\r\n    characters.map((character,index)=>(\r\n      <div className=\"character-item\" key={character.name}>\r\n        <div className=\"name-Container\">\r\n          <p>{character.name}</p>\r\n        </div>\r\n        <img src={character.imageURL} alt={character.name} />\r\n        <button\r\n          type=\"button\"\r\n          className=\"character-mint-button\"\r\n          onClick={()=> mintCharacterNFTAction(index)}\r\n          >{`Mint ${character.name}`}</button>\r\n      </div>\r\n    ));\r\n\r\n  return (\r\n    <div className=\"select-character-container\">\r\n      <h2>Mint Your shinobi. Choose wisely.</h2>\r\n      {characters.length > 0 && (\r\n        <div className= \"character-grid\">{renderCharacters()}</div>\r\n      )}\r\n      {mintingCharacter && (\r\n      <div className=\"loading\">\r\n        <div className=\"indicator\">\r\n          <LoadingIndicator />\r\n          <p>Minting In Progress...</p>\r\n        </div>\r\n        <img\r\n          src=\"https://64.media.tumblr.com/f5633623cadea65f18004ac13614b8a1/41702795cc3a48f7-eb/s400x600/6f8b7120797771f0aaee24c021576b6948462104.gifv\"\r\n          alt=\"Minting loading indicator\"\r\n        />\r\n      </div>\r\n    )}\r\n    </div>\r\n  );\r\n}\r\nexport default SelectCharacter;","import React,{useEffect , useState} from 'react';\r\nimport { ethers } from 'ethers';\r\nimport {CONTRACT_ADDRESS, transformCharacterData} from '../../constants';\r\nimport MyEpicGame from '../../MyEpicGame.json';\r\nimport './Arena.css';\r\nimport LoadingIndicator from \"../../Components/LoadingIndicator\";\r\n\r\nconst Arena = ({ characterNFT, setCharacterNFT, currentAccount }) => {\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [boss, setBoss] = useState(null);\r\n    const [attackState, setAttackState] = useState('');\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n\r\n    useEffect(()=>{\r\n        const {ethereum} = window;\r\n\r\n        if(ethereum){\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,MyEpicGame.abi,signer\r\n            );\r\n\r\n            setGameContract(gameContract);\r\n        }else{\r\n            console.log('Ethereum object not found');\r\n        }\r\n    },[]);\r\n\r\n    const runAttackAction = async () => {\r\n        try {\r\n            if (gameContract) {\r\n              setAttackState('attacking');\r\n              console.log('Attacking boss...');\r\n              const attackTxn = await gameContract.attackBoss();\r\n              await attackTxn.wait();\r\n              console.log('attackTxn:', attackTxn);\r\n              setAttackState('hit');\r\n\r\n              setShowToast(true);\r\n              setTimeout(() => {\r\n                setShowToast(false);\r\n              }, 5000);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error attacking boss:', error);\r\n            setAttackState('');\r\n          }\r\n    };\r\n\r\n    useEffect(() => {\r\n        /*\r\n         * Setup async function that will get the boss from our contract and sets in state\r\n         */\r\n        const fetchBoss = async () => {\r\n          const bossTxn = await gameContract.getBigBoss();\r\n          console.log('Boss:', bossTxn);\r\n          setBoss(transformCharacterData(bossTxn));\r\n        };\r\n\r\n        const onAttackComplete = (from, newBossHp, newPlayerHp) => {\r\n            const bossHp = newBossHp.toNumber();\r\n            const playerHp = newPlayerHp.toNumber();\r\n            const sender = from.toString();\r\n\r\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n            /*\r\n            * If player is our own, update both player and boss Hp\r\n            */\r\n            if (currentAccount === sender.toLowerCase()) {\r\n\r\n              setBoss((prevState) => {\r\n                  return { ...prevState, hp: bossHp };\r\n              });\r\n              setCharacterNFT((prevState) => {\r\n                  return { ...prevState, hp: playerHp };\r\n              });\r\n            }\r\n            /*\r\n            * If player isn't ours, update boss Hp only\r\n            */\r\n            else {\r\n              setBoss((prevState) => {\r\n                  return { ...prevState, hp: bossHp };\r\n              });\r\n            }\r\n        }\r\n        if (gameContract) {\r\n            fetchBoss();\r\n            gameContract.on('AttackComplete', onAttackComplete);\r\n        }\r\n\r\n        /*\r\n        * Make sure to clean up this event when this component is removed\r\n        */\r\n        return () => {\r\n            if (gameContract) {\r\n                gameContract.off('AttackComplete', onAttackComplete);\r\n            }\r\n        }\r\n    }, [gameContract]);\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"arena-container\">\r\n\r\n        {boss && characterNFT && (\r\n            <div id=\"toast\" className={showToast ? 'show' : ''}>\r\n              <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n            </div>\r\n          )}\r\n         {boss && (\r\n      <div className=\"boss-container\">\r\n        <div className={`boss-content ${attackState}`}>\r\n          <h2>☢️ {boss.name} ☢️</h2>\r\n          <div className=\"image-content\">\r\n            <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n            <div className=\"health-bar\">\r\n              <progress value={boss.hp} max={boss.maxHp} />\r\n              <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"attack-container\">\r\n          <button className=\"cta-button\" onClick={runAttackAction}>\r\n            {`♨️ Attack ${boss.name}`}\r\n          </button>\r\n        </div>\r\n        {attackState === 'attacking' && (\r\n        <div className=\"loading-indicator\">\r\n          <LoadingIndicator />\r\n          <p>Attacking ⚔️</p>\r\n        </div>\r\n      )}\r\n      </div>\r\n    )}\r\n    {characterNFT && (\r\n      <div className=\"players-container\">\r\n        <div className=\"player-container\">\r\n          <h2>Your Character</h2>\r\n          <div className=\"player\">\r\n            <div className=\"image-content\">\r\n              <h2>{characterNFT.name}</h2>\r\n              <img\r\n                src={characterNFT.imageURI}\r\n                alt={`Character ${characterNFT.name}`}\r\n              />\r\n              <div className=\"health-bar\">\r\n                <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"stats\">\r\n              <h4>{`⚠️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n              </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"active-players\">\r\n          <h2>Active Players</h2>\r\n          <div className=\"players-list\">{renderActivePlayersList()}</div>\r\n        </div> */}\r\n      </div>\r\n    )}\r\n  </div>\r\n);\r\n};\r\n\r\nexport default Arena;","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport SelectCharacter from './Components/SelectCharacter/index.js';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants'\r\nimport MyEpicGame from './MyEpicGame.json';\r\nimport { ethers } from 'ethers';\r\nimport Arena from './Components/Arena';\r\nimport LoadingIndicator from './Components/LoadingIndicator'\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = 'gri_lol4u';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  // State\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log('Make sure you have MetaMask!');\r\n        setIsLoading(false);\r\n        return;\r\n      } else {\r\n        console.log('We have the ethereum object', ethereum);\r\n\r\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n        if (accounts.length !== 0) {\r\n          const account = accounts[0];\r\n          console.log('Found an authorized account:', account);\r\n          setCurrentAccount(account);\r\n        } else {\r\n          console.log('No authorized account found');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Render Methods\r\nconst renderContent = () => {\r\n  // step 1: dealing with 1st button\r\n  if (isLoading) {\r\n    return <LoadingIndicator />;\r\n  }\r\n  \r\n  if (!currentAccount) {\r\n    return (\r\n      <div className=\"connect-wallet-container\">\r\n        <img\r\n              src=\"https://64.media.tumblr.com/1fabe31ed82455b4a00378de7bf21959/ea18d4f58d3d03de-14/s540x810/4230d33f626b3e9275bb02712ca55ffc210a9593.gifv\"\r\n              alt=\"leaf village\"\r\n        />\r\n        <button\r\n          className=\"cta-button connect-wallet-button\"\r\n          onClick={connectWalletAction}\r\n        >\r\n          Connect Wallet To Get Started\r\n        </button>\r\n      </div>\r\n    );\r\n  //step2: checking if we are connected to metamast and had nft to mint  ,2nd button  \r\n  } else if (currentAccount && !characterNFT) {\r\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\r\n  }else if (currentAccount && characterNFT) {\r\n    return <Arena characterNFT={characterNFT} currentAccount={currentAccount} setCharacterNFT={setCharacterNFT}/>;\r\n    //  <Arena characterNFT={characterNFT}  />;\r\n  }\r\n};\r\n\r\n  /*\r\n   * Implement your connectWallet method here\r\n   */\r\n  const connectWalletAction = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert('Get MetaMask!');\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n\r\n      /*\r\n       *  This should print out public address once we authorize Metamask.\r\n       */\r\n      console.log('Connected:', accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    const checkNetwork = async () => {\r\n      try { \r\n        if (window.ethereum.networkVersion !== '5') {\r\n          alert(\"Please connect to Goerli!\")\r\n        }\r\n      } catch(error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    /*\r\n     * Anytime our component mounts, make sure to immiediately set our loading state\r\n     */\r\n    setIsLoading(true);\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchNFTMetadata = async () => {\r\n      console.log('Checking for Character NFT on address:', currentAccount);\r\n  \r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        MyEpicGame.abi,\r\n        signer\r\n      );\r\n  \r\n      const txn = await gameContract.checkIfUserHasNFT();\r\n      if (txn.name) {\r\n        console.log('User has character NFT');\r\n        setCharacterNFT(transformCharacterData(txn));\r\n      } else {\r\n        console.log('No character NFT found');\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n  \r\n    /*\r\n     * We only want to run this, if we have a connected wallet\r\n     */\r\n    if (currentAccount) {\r\n      console.log('CurrentAccount:', currentAccount);\r\n      fetchNFTMetadata();\r\n    }\r\n  }, [currentAccount]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">🍀 Leaf village 🍀</p>\r\n          <p className=\"sub-text\">Team up to protect the Ninja World!</p>\r\n          {renderContent()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`Built by @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}